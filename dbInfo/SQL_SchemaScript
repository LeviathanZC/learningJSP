-- MySQL Script generated by MySQL Workbench
-- Аўт 17 ліс 2020 13:43:09
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema online_store
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `online_store` ;

-- -----------------------------------------------------
-- Schema online_store
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `online_store` DEFAULT CHARACTER SET utf8 ;
USE `online_store` ;

-- -----------------------------------------------------
-- Table `online_store`.`user_roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`user_roles` ;

CREATE TABLE IF NOT EXISTS `online_store`.`user_roles` (
  `role_id` INT NOT NULL,
  `role_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`role_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `online_store`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`users` ;

CREATE TABLE IF NOT EXISTS `online_store`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `login` VARCHAR(45) NOT NULL,
  `email` VARCHAR(220) NOT NULL,
  `pw_hash` VARCHAR(45) NOT NULL,
  `role` INT NOT NULL,
  `firstName` VARCHAR(45) NOT NULL,
  `lastName` VARCHAR(45) NOT NULL,
  `birthDate` DATE NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `group_code_idx` (`role` ASC) VISIBLE,
  CONSTRAINT `role_code`
    FOREIGN KEY (`role`)
    REFERENCES `online_store`.`user_roles` (`role_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `online_store`.`order_status`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`order_status` ;

CREATE TABLE IF NOT EXISTS `online_store`.`order_status` (
  `status_code` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`status_code`))
ENGINE = InnoDB
AUTO_INCREMENT = 0;


-- -----------------------------------------------------
-- Table `online_store`.`orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`orders` ;

CREATE TABLE IF NOT EXISTS `online_store`.`orders` (
  `order_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `order_date` DATE NOT NULL,
  `status_code` INT NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `status_code_idx` (`status_code` ASC) VISIBLE,
  INDEX `user_id_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `status_code`
    FOREIGN KEY (`status_code`)
    REFERENCES `online_store`.`order_status` (`status_code`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `online_store`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `online_store`.`categories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`categories` ;

CREATE TABLE IF NOT EXISTS `online_store`.`categories` (
  `category_id` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(45) NOT NULL,
  `category_desc` VARCHAR(120) NOT NULL,
  PRIMARY KEY (`category_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `online_store`.`brands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`brands` ;

CREATE TABLE IF NOT EXISTS `online_store`.`brands` (
  `brand_id` INT NOT NULL AUTO_INCREMENT,
  `brand_name` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`brand_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `online_store`.`products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`products` ;

CREATE TABLE IF NOT EXISTS `online_store`.`products` (
  `product_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NOT NULL,
  `category_id` INT NOT NULL,
  `description` VARCHAR(1024) NULL,
  `price` INT NOT NULL,
  `brand_id` INT NOT NULL,
  `quantity` INT NOT NULL,
  PRIMARY KEY (`product_id`),
  INDEX `category_id_idx` (`category_id` ASC) VISIBLE,
  INDEX `brand_id_idx` (`brand_id` ASC) VISIBLE,
  CONSTRAINT `category_id`
    FOREIGN KEY (`category_id`)
    REFERENCES `online_store`.`categories` (`category_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `brand_id`
    FOREIGN KEY (`brand_id`)
    REFERENCES `online_store`.`brands` (`brand_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `online_store`.`orders_products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`orders_products` ;

CREATE TABLE IF NOT EXISTS `online_store`.`orders_products` (
  `orders_products_id` INT NOT NULL AUTO_INCREMENT,
  `product_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  `amount` INT NOT NULL,
  PRIMARY KEY (`orders_products_id`),
  INDEX `product_id_idx` (`product_id` ASC) VISIBLE,
  INDEX `order_id_idx` (`order_id` ASC) VISIBLE,
  CONSTRAINT `product_id`
    FOREIGN KEY (`product_id`)
    REFERENCES `online_store`.`products` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `order_id`
    FOREIGN KEY (`order_id`)
    REFERENCES `online_store`.`orders` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `online_store`.`images`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`images` ;

CREATE TABLE IF NOT EXISTS `online_store`.`images` (
  `image_id` INT NOT NULL,
  `image_path` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`image_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `online_store`.`product_image`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `online_store`.`product_image` ;

CREATE TABLE IF NOT EXISTS `online_store`.`product_image` (
  `id_product_image` INT NOT NULL,
  `id_product` INT NOT NULL,
  `id_image` INT NOT NULL,
  PRIMARY KEY (`id_product_image`),
  INDEX `product_id_idx` (`id_product` ASC) VISIBLE,
  INDEX `image_id_idx` (`id_image` ASC) VISIBLE,
  CONSTRAINT `product_id`
    FOREIGN KEY (`id_product`)
    REFERENCES `online_store`.`products` (`product_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `image_id`
    FOREIGN KEY (`id_image`)
    REFERENCES `online_store`.`images` (`image_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `online_store`.`user_roles`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`user_roles` (`role_id`, `role_name`) VALUES (0, 'ADMIN');
INSERT INTO `online_store`.`user_roles` (`role_id`, `role_name`) VALUES (1, 'CUSTOMER');
INSERT INTO `online_store`.`user_roles` (`role_id`, `role_name`) VALUES (2, 'VIP');
INSERT INTO `online_store`.`user_roles` (`role_id`, `role_name`) VALUES (3, 'BANNED');

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`users`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`users` (`id`, `login`, `email`, `pw_hash`, `role`, `firstName`, `lastName`, `birthDate`) VALUES (1, 'leviathan', 'zercomp@gmail.com', '1244134151', 0, 'Yaraslau', 'Karniyuk', '2000.10.13');
INSERT INTO `online_store`.`users` (`id`, `login`, `email`, `pw_hash`, `role`, `firstName`, `lastName`, `birthDate`) VALUES (2, 'varapay', 'varapay@gmail.com', '246134146341', 1, 'Ivan', 'Varabey', '1999.09.08');

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`order_status`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (0, 'SHOPPING_CART');
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (1, 'PROCESSING');
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (2, 'PACKED');
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (3, 'IN_POST_OFFICE');
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (4, 'ON_THE_WAY');
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (5, 'CROSSED_THE_BORDER');
INSERT INTO `online_store`.`order_status` (`status_code`, `name`) VALUES (6, 'DELIVERED');

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`orders`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`orders` (`order_id`, `user_id`, `order_date`, `status_code`) VALUES (1, 2, '2020.10.22', 0);
INSERT INTO `online_store`.`orders` (`order_id`, `user_id`, `order_date`, `status_code`) VALUES (2, 2, '2020.10.22', 0);
INSERT INTO `online_store`.`orders` (`order_id`, `user_id`, `order_date`, `status_code`) VALUES (3, 2, '2020.10.22', 0);
INSERT INTO `online_store`.`orders` (`order_id`, `user_id`, `order_date`, `status_code`) VALUES (4, 2, '2020.10.22', 0);

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`categories`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`categories` (`category_id`, `category_name`, `category_desc`) VALUES (1, 'videocards', 'storage of videocards');
INSERT INTO `online_store`.`categories` (`category_id`, `category_name`, `category_desc`) VALUES (2, 'processors', 'storage of processors');

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`brands`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`brands` (`brand_id`, `brand_name`) VALUES (1, 'MSI');
INSERT INTO `online_store`.`brands` (`brand_id`, `brand_name`) VALUES (2, 'ASUS');
INSERT INTO `online_store`.`brands` (`brand_id`, `brand_name`) VALUES (3, 'Intel');
INSERT INTO `online_store`.`brands` (`brand_id`, `brand_name`) VALUES (3, 'AMD');

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`products`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`products` (`product_id`, `name`, `category_id`, `description`, `price`, `brand_id`, `quantity`) VALUES (1, 'MSI GeForce RTX3090 VENTUS 3X OC 24 GB OC Enthusiast', 1, 'Используя графический процессор с микроархитектурой Ampere, представляющей второе поколение чипов NVIDIA RTX, видеокарта GeForce RTX™ 3090 готова обеспечить беспрецедентную игровую производительность за счет улучшенных вычислительных блоков и супербыстрой памяти GDDR6X, объем которой составляет фантастические 24 ГБ!', 150, 1, 3);
INSERT INTO `online_store`.`products` (`product_id`, `name`, `category_id`, `description`, `price`, `brand_id`, `quantity`) VALUES (2, 'ASUS GeForce RTX 2060 SUPER DUAL Advanced EVO V2 8.0 GB High End', 1, 'К сожалению, описание для данного продукта в настоящее время недоступно.\n', 100, 2, 5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `online_store`.`orders_products`
-- -----------------------------------------------------
START TRANSACTION;
USE `online_store`;
INSERT INTO `online_store`.`orders_products` (`orders_products_id`, `product_id`, `order_id`, `amount`) VALUES (1, 1, 1, 2);
INSERT INTO `online_store`.`orders_products` (`orders_products_id`, `product_id`, `order_id`, `amount`) VALUES (2, 1, 2, 2);
INSERT INTO `online_store`.`orders_products` (`orders_products_id`, `product_id`, `order_id`, `amount`) VALUES (3, 2, 2, 3);
INSERT INTO `online_store`.`orders_products` (`orders_products_id`, `product_id`, `order_id`, `amount`) VALUES (4, 2, 4, 5);

COMMIT;

